name: Build Game on Multiple Platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm, macos-13, macos-14, windows-latest]
        compiler: [gcc, clang, msvc]
        build_type: [Release]
        exclude:
          # Windows only supports msvc
          - os: windows-latest
            compiler: gcc
          - os: windows-latest
            compiler: clang
          # Linux does not support msvc
          - os: ubuntu-latest
            compiler: msvc
          - os: ubuntu-24.04-arm
            compiler: msvc
          # macOS uses Apple Clang
          - os: macos-13
            compiler: gcc
          - os: macos-13
            compiler: msvc
          - os: macos-14
            compiler: gcc
          - os: macos-14
            compiler: msvc
        include:
          # Linux GNU/Clang
          - os: ubuntu-latest
            compiler: gcc
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            compiler: clang
            c_compiler: clang
            cpp_compiler: clang++
          - os: ubuntu-24.04-arm
            compiler: gcc
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-24.04-arm
            compiler: clang
            c_compiler: clang
            cpp_compiler: clang++
          # macOS (Apple Clang)
          - os: macos-13
            compiler: clang
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-14
            compiler: clang
            c_compiler: clang
            cpp_compiler: clang++
          # Windows MSVC (use VS generator)
          - os: windows-latest
            compiler: msvc
            vs_generator: "Visual Studio 17 2022"
            arch: x64

    steps:
    - uses: actions/checkout@v4

    # Set up MSVC environment so cl.exe is available in PATH
    - name: Setup MSVC Developer Command Prompt
      if: matrix.os == 'windows-latest'
      uses: ilammy/msvc-dev-cmd@v1

    # Linux build deps so SDL can enable Wayland/KMSDRM backends
    - name: Install Clang on Ubuntu when requested
      if: startsWith(matrix.os, 'ubuntu-') && matrix.compiler == 'clang'
      run: |
        sudo apt-get update
        sudo apt-get install -y clang

    - name: Install base toolchain on Ubuntu
      if: startsWith(matrix.os, 'ubuntu-')
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config

    - name: Install Linux build dependencies
      if: startsWith(matrix.os, 'ubuntu-')
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libdrm-dev libgbm-dev libudev-dev \
          libwayland-dev wayland-protocols libxkbcommon-dev libdecor-0-dev \
          libpulse-dev libpipewire-0.3-dev \
          libx11-dev libxext-dev libxrandr-dev libxcursor-dev libxinerama-dev libxi-dev libxfixes-dev \
          libgl1-mesa-dev libglu1-mesa-dev \
          libfreetype6-dev libharfbuzz-dev libglm-dev \
          portaudio19-dev libopus-dev libopusfile-dev \
          nasm ninja-build
    # macOS build tools (nasm for libjpeg-turbo)
    - name: Install macOS build tools
      if: startsWith(matrix.os, 'macos-')
      run: |
        brew update
        brew install nasm ninja pkg-config portaudio opus opusfile freetype harfbuzz glm
        echo "BREW_PREFIX=$(brew --prefix)" >> $GITHUB_ENV
        echo "CPLUS_INCLUDE_PATH=$(brew --prefix)/include" >> $GITHUB_ENV
        echo "CPATH=$(brew --prefix)/include" >> $GITHUB_ENV

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build-static" >> "$GITHUB_OUTPUT"

    # Windows: pkg-config is required by the engine CMake; nasm for libjpeg-turbo
    - name: Install tools on Windows
      if: matrix.os == 'windows-latest'
      run: |
        choco install -y pkgconfiglite nasm yasm git
        # Ensure NASM/YASM are on PATH for subsequent steps
        echo "C:\\Program Files\\NASM" >> $Env:GITHUB_PATH
        echo "C:\\Program Files (x86)\\Yasm" >> $Env:GITHUB_PATH

    - name: Install dependencies with vcpkg (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        git clone https://github.com/microsoft/vcpkg.git "$Env:USERPROFILE\\vcpkg"
        & "$Env:USERPROFILE\\vcpkg\\bootstrap-vcpkg.bat"
        # Install static libs
        & "$Env:USERPROFILE\\vcpkg\\vcpkg.exe" install portaudio opus opusfile glm --triplet x64-windows-static
        # Expose VCPKG_ROOT and PKG_CONFIG_PATH for later steps (pkgconfiglite)
        echo "VCPKG_ROOT=$Env:USERPROFILE\\vcpkg" >> $Env:GITHUB_ENV
        echo "PKG_CONFIG_PATH=$Env:USERPROFILE\\vcpkg\\installed\\x64-windows-static\\lib\\pkgconfig;$Env:USERPROFILE\\vcpkg\\installed\\x64-windows-static\\share\\pkgconfig" >> $Env:GITHUB_ENV

    - name: Verify toolchain (Linux/macOS)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        echo "=== CMake ===" && cmake --version
        echo "=== Ninja ===" && ninja --version || true
        echo "=== GCC ===" && gcc --version || true
        echo "=== Clang ===" && clang --version || true
        echo "=== NASM ===" && (command -v nasm && nasm -v) || echo "nasm not found"
        echo "=== YASM ===" && (command -v yasm && yasm --version) || echo "yasm not found"
        echo "=== pkg-config ===" && pkg-config --version || true
        echo "=== PortAudio ===" && (pkg-config --modversion portaudio-2.0 && echo OK) || echo "PortAudio not found"
        echo "=== Opus ===" && (pkg-config --modversion opus && echo OK) || echo "Opus not found"
        echo "=== Opusfile ===" && (pkg-config --modversion opusfile && echo OK) || echo "Opusfile not found"

    - name: Verify toolchain (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        Write-Host '=== CMake ==='; cmake --version
        Write-Host '=== MSVC cl ==='; cmd /c "cl /?" | Select-Object -First 1
        Write-Host '=== NASM ==='; where nasm; if ($?) { nasm -v } else { Write-Host 'nasm not found' }
        Write-Host '=== YASM ==='; where yasm; if ($?) { yasm --version } else { Write-Host 'yasm not found' }
        Write-Host '=== vcpkg root ==='; Write-Host $Env:VCPKG_ROOT
        Write-Host '=== PKG_CONFIG_PATH ==='; Write-Host $Env:PKG_CONFIG_PATH
        Write-Host '=== pkg-config portaudio-2.0 ==='; pkg-config --modversion portaudio-2.0
        Write-Host '=== pkg-config opus ==='; pkg-config --modversion opus
        Write-Host '=== pkg-config opusfile ==='; pkg-config --modversion opusfile

    - name: Configure CMake (Linux - static)
      if: startsWith(matrix.os, 'ubuntu-')
      env:
        SDL3_DIR: "${{ steps.strings.outputs.build-output-dir }}/_deps/sdl3-build"
        CC: ${{ matrix.c_compiler }}
        CXX: ${{ matrix.cpp_compiler }}
      run: >
        cmake -S ${{ github.workspace }} -B ${{ steps.strings.outputs.build-output-dir }} -GNinja 
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} 
        -DBUILD_SHARED_LIBS=OFF 
        -DAME_BUILD_EXAMPLES=OFF -DAME_BUILD_UNITYLIKE=OFF 
        -DAME_FORCE_STATIC_SDL=ON -DAME_PREFER_STATIC_SDL=ON -DAME_FETCH_STATIC_SDL=ON 
        -DCMAKE_EXE_LINKER_FLAGS="-static-libstdc++ -static-libgcc" 
        -DCMAKE_C_FLAGS="-DSDL_ENABLE_OLD_NAMES=1" -DCMAKE_CXX_FLAGS="-DSDL_ENABLE_OLD_NAMES=1" 
        -DSDL3_DIR=${SDL3_DIR} -DCMAKE_PREFIX_PATH=${SDL3_DIR}

    - name: Configure CMake (macOS - static)
      if: startsWith(matrix.os, 'macos-')
      env:
        SDL3_DIR: "${{ steps.strings.outputs.build-output-dir }}/_deps/sdl3-build"
        CPLUS_INCLUDE_PATH: "${{ env.BREW_PREFIX }}/include"
        CPATH: "${{ env.BREW_PREFIX }}/include"
      run: >
        cmake -S ${{ github.workspace }} -B ${{ steps.strings.outputs.build-output-dir }} -GNinja 
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} 
        -DBUILD_SHARED_LIBS=OFF 
        -DAME_BUILD_EXAMPLES=OFF -DAME_BUILD_UNITYLIKE=OFF 
        -DAME_FORCE_STATIC_SDL=ON -DAME_PREFER_STATIC_SDL=ON -DAME_FETCH_STATIC_SDL=ON 
        -DCMAKE_C_FLAGS="-DSDL_ENABLE_OLD_NAMES=1" -DCMAKE_CXX_FLAGS="-DSDL_ENABLE_OLD_NAMES=1" 
        -DSDL3_DIR=${SDL3_DIR} -DCMAKE_PREFIX_PATH=${SDL3_DIR}

    - name: Configure CMake (Windows - static)
      if: matrix.os == 'windows-latest'
      env:
        SDL3_DIR_WIN: "${{ steps.strings.outputs.build-output-dir }}\\_deps\\sdl3-build"
      run: >
        cmake -S ${{ github.workspace }} -B ${{ steps.strings.outputs.build-output-dir }} 
        -G "${{ matrix.vs_generator }}" -A ${{ matrix.arch }} 
        -DBUILD_SHARED_LIBS=OFF 
        -DAME_BUILD_EXAMPLES=OFF -DAME_BUILD_UNITYLIKE=OFF 
        -DAME_FORCE_STATIC_SDL=ON -DAME_PREFER_STATIC_SDL=ON -DAME_FETCH_STATIC_SDL=ON 
        -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded 
        -DSDL3_DIR=${{ env.SDL3_DIR_WIN }} -DCMAKE_PREFIX_PATH=${{ env.SDL3_DIR_WIN }} 
        -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}\\scripts\\buildsystems\\vcpkg.cmake

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Copy assets to Build Directory
      shell: bash
      run: |
        cp -r ${{ github.workspace }}/assets ${{ steps.strings.outputs.build-output-dir }}/assets

    - name: Create Zip Archive
      shell: bash
      run: |
        cd ${{ steps.strings.outputs.build-output-dir }}
        zip -r ${{ github.workspace }}/game-${{ matrix.os }}-${{ matrix.build_type }}.zip .

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: game-${{ matrix.os }}-${{ matrix.build_type }}
        path: ${{ github.workspace }}/game-${{ matrix.os }}-${{ matrix.build_type }}.zip
