name: Build Game on Multiple Platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm, macos-13, macos-14, windows-latest]
        compiler: [gcc, clang, msvc]
        build_type: [Release]
        exclude:
          # Windows only supports msvc
          - os: windows-latest
            compiler: gcc
          - os: windows-latest
            compiler: clang
          # Linux does not support msvc
          - os: ubuntu-latest
            compiler: msvc
          - os: ubuntu-24.04-arm
            compiler: msvc
          # macOS uses Apple Clang
          - os: macos-13
            compiler: gcc
          - os: macos-13
            compiler: msvc
          - os: macos-14
            compiler: gcc
          - os: macos-14
            compiler: msvc
        include:
          # Linux GNU/Clang
          - os: ubuntu-latest
            compiler: gcc
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-24.04-arm
            compiler: gcc
            c_compiler: gcc
            cpp_compiler: g++
          # macOS (Apple Clang)
          - os: macos-13
            compiler: clang
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-14
            compiler: clang
            c_compiler: clang
            cpp_compiler: clang++
          # Windows MSVC (use VS generator)
          - os: windows-latest
            compiler: msvc
            vs_generator: "Visual Studio 17 2022"
            arch: x64

    steps:
    - uses: actions/checkout@v4

    # Linux build deps so SDL can enable Wayland/KMSDRM backends
    - name: Install Linux build dependencies
      if: startsWith(matrix.os, 'ubuntu-')
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libdrm-dev libgbm-dev libudev-dev \
          libwayland-dev wayland-protocols libxkbcommon-dev libdecor-0-dev \
          libpulse-dev libpipewire-0.3-dev \
          libx11-dev libxext-dev libxrandr-dev libxcursor-dev libxinerama-dev libxi-dev libxfixes-dev \
          nasm

    # macOS build tools (nasm for libjpeg-turbo)
    - name: Install macOS build tools
      if: startsWith(matrix.os, 'macos-')
      run: |
        brew update
        brew install nasm

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    # Windows: pkg-config is required by the engine CMake; nasm for libjpeg-turbo
    - name: Install tools on Windows
      if: matrix.os == 'windows-latest'
      run: |
        choco install -y pkgconfiglite nasm sdl3 sdl3_image sdl3_ttf

    - name: Configure CMake (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DBUILD_BUNDLED_SDL=ON -DBUILD_BUNDLED_SDL_IMAGE=ON -DBUILD_BUNDLED_SDL_TTF=ON
        -DSDL3_IMAGE_TAG=release-3.2.4
        -S ${{ github.workspace }}

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }} -G "${{ matrix.vs_generator }}" -A ${{ matrix.arch }}
        -DBUILD_BUNDLED_SDL=ON -DBUILD_BUNDLED_SDL_IMAGE=ON -DBUILD_BUNDLED_SDL_TTF=ON
        -DSDL3_IMAGE_TAG=release-3.2.4
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Copy Assets to Build Directory
      shell: bash
      run: |
        cp -r ${{ github.workspace }}/Assets ${{ steps.strings.outputs.build-output-dir }}/Assets

    - name: Create Zip Archive
      shell: bash
      run: |
        cd ${{ steps.strings.outputs.build-output-dir }}
        zip -r ${{ github.workspace }}/game-${{ matrix.os }}-${{ matrix.build_type }}.zip .

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: game-${{ matrix.os }}-${{ matrix.build_type }}
        path: ${{ github.workspace }}/game-${{ matrix.os }}-${{ matrix.build_type }}.zip
