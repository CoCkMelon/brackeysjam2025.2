name: CMake Build and Package on Multiple Platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest, freebsd, openbsd]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          # Windows configuration
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl

          # Ubuntu with GCC
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++

          # Ubuntu with Clang
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++

          # macOS with Clang
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++

          # FreeBSD configuration (requires self-hosted runner)
          - os: freebsd
            c_compiler: clang
            cpp_compiler: clang++

          # OpenBSD configuration (requires self-hosted runner)
          - os: openbsd
            c_compiler: clang
            cpp_compiler: clang++

        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc
          - os: macos-latest
            c_compiler: cl
          # Exclude compilers for FreeBSD and OpenBSD that aren't typically used
          - os: freebsd
            c_compiler: gcc
          - os: openbsd
            c_compiler: gcc

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup SDL
        uses: libsdl-org/setup-sdl@v1
        with:
          version: 3-head
          version-sdl-image: 3-head
          version-sdl-mixer: 3-head
          version-sdl-ttf: 3-head
          # Add other SDL components as needed

      - name: Set Build Output Directory
        id: dirs
        run: echo "build_dir=${{ github.workspace }}/build" >> $GITHUB_ENV

      - name: Configure CMake
        run: |
          cmake -B $build_dir \
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -S ${{ github.workspace }}

      - name: Build Project
        run: cmake --build $build_dir --config ${{ matrix.build_type }}

      - name: Run Tests
        working-directory: $build_dir
        run: ctest --output-on-failure --build-config ${{ matrix.build_type }}

      - name: Package Build into ZIP (Non-Windows)
        if: success() && matrix.os != 'windows-latest'
        run: |
          cd $build_dir
          zip -r ../../build-${{ matrix.os }}-${{ matrix.build_type }}.zip ./*
        shell: bash

      - name: Package Build into ZIP (Windows)
        if: success() && matrix.os == 'windows-latest'
        run: |
          Compress-Archive -Path * -DestinationPath ..\build-${{ matrix.os }}-${{ matrix.build_type }}.zip
        shell: powershell
        working-directory: $build_dir

      - name: Upload Build Artifact
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ matrix.os }}-${{ matrix.build_type }}
          path: |
            ${{ github.workspace }}/build-${{ matrix.os }}-${{ matrix.build_type }}.zip
