# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

            - name: Setup SDL
  # You may pin to the exact commit or the version.
  # uses: libsdl-org/setup-sdl@f0131347757b3b78ed886b7f0c36b19e26aa2937
  uses: libsdl-org/setup-sdl@v1
  with:
    # Required version of SDL (2.x.y, 2-any, 2-latest, 2-head, 3-head), or git hash
    version: 3-head
    # Version of SDL_image (2.x.y, 2-any, 2-latest, 2-head, 3-head), git hash, or <empty>
    version-sdl-image: 3-head
    # Version of SDL_mixer (2.x.y, 2-any, 2-latest, 2-head, 3-head), git hash, or <empty>
    version-sdl-mixer: 3-head
    # Version of SDL_net (2.x.y, 2-any, 2-latest, 2-head, 3-head), git hash, or <empty>
    version-sdl-net: # optional
    # Version of SDL_rtf (2.x.y, 2-any, 2-latest, 2-head, 3-head), git hash, or <empty>
    version-sdl-rtf: # optional
    # Version of SDL_ttf (2.x.y, 2-any, 2-latest, 2-head, 3-head), git hash, or <empty>
    version-sdl-ttf: 3-head
    # Version of sdl2-compat (2.x.y, 2-any, 2-latest, 2-head), git hash, or <empty>
    version-sdl2-compat: # optional
    # Version of sdl12-compat (1.x.y, 1-any, 1-latest, 1-head), git hash, or <empty>
    version-sdl12-compat: # optional
    # Allow pre-releases
    pre-release: # default is true
    # CMake build type (Release/Debug/RelWithDebInfo/MinSizeRel)
    build-type: # default is Debug
    # Build and install SDL_test library
    sdl-test: # optional, default is false
    # Path of a CMake toolchain file
    cmake-toolchain-file: # optional
    # CMake generator name (see https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html)
    cmake-generator: # optional
    # Extra CMake arguments during configuration
    cmake-arguments: # optional
    # Install dependencies (supports apt-get, dnf, brew, and msys2-pacman)
    install-linux-dependencies: # optional
    # Run commands as `$shell $file` (with $file containing the build commands)
    shell: # optional
    # Unique string to include in the GitHub SDL cache hash
    discriminator: # optional
    # Add path of the SDL (shared) library to PATH/LD_LIBRARY_PATH/DYLD_LIBRARY_PATH
    add-to-environment: # optional, default is false
    # A GitHub API token.
    token: # optional, default is ${{ github.token }}

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
